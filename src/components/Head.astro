---
import "../styles/global.css";
import '../styles/prism.css';
import { ViewTransitions } from "astro:transitions";
import '@fontsource/prompt';
import '@fontsource/zilla-slab';
import site from '@config/site';
interface Props {
  title: string;
  description: string;
  image?: string;
  datePublished?: string,
  dateModified: string,
  metaImage?: {
    src: string,
    height: string,
    width: string,
  },
  path?: string,
  article?: boolean,
  author?: {
    name: string,
  },
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { 
  title = site.title,
  description = site.description,
  datePublished,
  dateModified = new Date().toISOString(),
  metaImage = {
    src: site.image.src,
    height: site.image.height,
    width: site.image.width,
  },
  path = Astro.url.pathname,
  article = false,
  author = {
    name: site.author.name,
    url: site.author.url,
  },

  } = Astro.props;

  // schema.org in JSONLD format
  // https://developers.google.com/search/docs/guides/intro-structured-data

  let schemaArticle = null

  const schemaOrgWebPage = {
    '@context': 'http://schema.org',
    '@type': 'WebPage',
    url: path,
    inLanguage: site.siteLanguage,
    mainEntityOfPage: path,
    description: description,
    name: title,
    author: {
      '@type': 'Person',
      name: author.name,
    },
    copyrightHolder: {
      '@type': 'Person',
      name: author.name,
    },
    creator: {
      '@type': 'Person',
      name: author.name,
    },
    publisher: {
      '@type': 'Organization',
      name: site.titleAlt,
      logo: {
        '@type': 'ImageObject',
        url: `${site.url}${metaImage.src}`,
      },
    },
    datePublished,
    dateModified,
    image: {
      '@type': 'ImageObject',
      url: metaImage.src,
    },
  }

  if (article) {
    schemaArticle = {
      '@context': 'http://schema.org',
      '@type': 'Article',
      author: {
        '@type': 'Person',
        name: author.name,
      },
      creator: {
        '@type': 'Person',
        name: author.name,
      },
      publisher: {
        '@type': 'Organization',
        name: site.titleAlt,
        logo: {
          '@type': 'ImageObject',
          url: `${site.url}${metaImage.src}`,
        },
      },
      headline: title,
      datePublished,
      dateModified,
      description: description,
      inLanguage: site.siteLanguage,
      url: path,
      name: title,
      image: {
        '@type': 'ImageObject',
        url: metaImage.src,
      },
      mainEntityOfPage: path,
    }
  }

  let pageSchema = article ? schemaArticle : schemaOrgWebPage;

---

<!-- Global Metadata -->
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="icon" href="/favicon.svg" />
<link
    rel="alternate"
    type="application/rss+xml"
    title={site.title}
    href={`${Astro.site}rss.xml`}
/>

<!-- Astro version -->
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />
<meta name="image" content={metaImage.src} />

<!-- Indie Web -->
<link rel="pingback" href={site.pingbackUrl} />
<link rel="webmention" href={site.webmentionUrl} />
<link rel="micropub" href={site.micropubUrl} />

<!-- Open Graph / Facebook -->
<meta property="og:site_name" content={site.facebook} />
<meta property="og:type" content={article ? 'article' : 'website'} />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={metaImage.src} />
<meta property="og:image:width" content={String(metaImage.width)} />
<meta property="og:image:height" content={String(metaImage.height)} />

<!-- Twitter -->
<meta name="twitter:creator" content={site.twitter} />
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={metaImage.src} />

<!-- PageFind -->
<link href="/pagefind/pagefind-ui.css" rel="stylesheet" />
<script is:inline src="/pagefind/pagefind-ui.js"></script>

<ViewTransitions />

<script
  type="application/ld+json"
  id="pageSchema"
  data-page-schema={JSON.stringify(pageSchema)}
  is:inline
>
</script>

<script is:inline>
  // Client-side JavaScript to access and parse the pageSchema
  document.addEventListener('DOMContentLoaded', () => {
    const schemaElement = document.getElementById('pageSchema');
    if (schemaElement) {
      const pageSchema = JSON.parse(
        schemaElement.getAttribute('data-page-schema')
      );
      schemaElement.innerHTML = JSON.stringify(pageSchema, null, 2); 
    }
  });
</script>