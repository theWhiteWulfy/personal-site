---
export interface Props {
  title: string;
  description: string;
  benefits: string[];
  resourceMetadata: {
    fileSize?: string;
    pageCount?: number;
    format?: string;
    category?: string;
  };
  image?: string;
  ctaText?: string;
}

const { 
  title, 
  description, 
  benefits, 
  resourceMetadata,
  image,
  ctaText = "Get Your Free Copy"
} = Astro.props;

const { fileSize, pageCount, format = "PDF", category } = resourceMetadata;
---

<section class="resource-hero">
  <div class="hero-container">
    <div class="hero-content">
      <div class="hero-text">        
        <h1 class="hero-title">{title}</h1>
        
        <div class="hero-description">
          <p>{description}</p>
        </div>

        <div class="resource-metadata">
          <div class="metadata-grid">
            <div class="metadata-item">
              <svg class="metadata-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <polyline points="14,2 14,8 20,8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
              <span class="metadata-label">Format</span>
              <span class="metadata-value">{format}</span>
            </div>
            
            {pageCount && (
              <div class="metadata-item">
                <svg class="metadata-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span class="metadata-label">Pages</span>
                <span class="metadata-value">{pageCount}</span>
              </div>
            )}
            
            {fileSize && (
              <div class="metadata-item">
                <svg class="metadata-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                </svg>
                <span class="metadata-label">Size</span>
                <span class="metadata-value">{fileSize}</span>
              </div>
            )}
          </div>
        </div>

        {benefits && benefits.length > 0 && (
          <div class="benefits-section">
            <h3 class="benefits-title">What You'll Get:</h3>
            <ul class="benefits-list">
              {benefits.map(benefit => (
                <li class="benefit-item">
                  <svg class="check-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                  <span>{benefit}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        <div class="hero-cta">
          <a href="#resource-form" class="cta-button">
            <svg class="download-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <polyline points="7,10 12,15 17,10" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <line x1="12" y1="15" x2="12" y2="3" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
            {ctaText}
          </a>
        </div>
      </div>

      {image && (
        <div class="hero-image">
          <img 
            src={image} 
            alt={`Preview of ${title}`}
            class="resource-preview"
            loading="eager"
          />
        </div>
      )}
    </div>
  </div>
</section>

<style>
  .resource-hero {
    background: linear-gradient(135deg, var(--background-color) 0%, var(--background-secondary-color) 100%);
    padding: 4rem 0;
    border-bottom: 1px solid var(--border-color);
  }

  .hero-container {
    max-width: var(--container-width);
    margin: 0 auto;
    padding: 0 2rem;
  }

  .hero-content {
    display: grid;
    grid-template-columns: 1fr;
    gap: 3rem;
    align-items: center;
  }

  @media (--medium-up) {
    .hero-content {
      grid-template-columns: 2fr 1fr;
      gap: 4rem;
    }
  }

  .hero-text {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .resource-category {
    margin-bottom: 0.5rem;
  }

  .hero-title {
    font-size: var(--text-4xl);
    font-weight: 700;
    line-height: 1.2;
    color: var(--text-color);
    margin: 0;
    font-family: var(--serif-font);
  }

  @media (max-width: 767px) {
    .hero-title {
      font-size: var(--text-3xl);
    }
  }

  .hero-description {
    font-size: var(--text-lg);
    line-height: var(--line-height);
    color: var(--muted-text-color);
  }

  .hero-description p {
    margin: 0;
  }

  .resource-metadata {
    padding: 1.5rem;
    background-color: var(--input-background-color);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
  }

  .metadata-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
  }

  .metadata-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    gap: 0.5rem;
  }

  .metadata-icon {
    color: var(--secondary-color);
    margin-bottom: 0.25rem;
  }

  .metadata-label {
    font-size: var(--text-xs);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--muted-text-color);
  }

  .metadata-value {
    font-size: var(--text-sm);
    font-weight: 700;
    color: var(--text-color);
  }

  .benefits-section {
    padding: 1.5rem 0;
  }

  .benefits-title {
    font-size: var(--text-lg);
    font-weight: 600;
    color: var(--text-color);
    margin: 0 0 1rem 0;
    font-family: var(--serif-font);
  }

  .benefits-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .benefit-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    font-size: var(--text-base);
    line-height: var(--line-height);
    color: var(--text-color);
  }

  .check-icon {
    color: var(--success-color);
    flex-shrink: 0;
    margin-top: 0.125rem;
  }

  .hero-cta {
    margin-top: 1rem;
  }

  .cta-button {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    font-size: var(--text-lg);
    font-weight: 700;
    text-decoration: none;
    color: var(--button-text-color);
    background-color: var(--button-background-color);
    border-radius: calc(var(--border-radius) * 2);
    transition: var(--global-transition);
    box-shadow: 0 4px 6px var(--shadow-color);
  }

  .cta-button:hover {
    background-color: color-mod(var(--button-background-color) tint(15%));
    transform: translateY(-2px);
    box-shadow: 0 6px 12px var(--shadow-color);
    text-decoration: none;
    color: var(--button-text-color);
  }

  .cta-button:active {
    transform: translateY(0);
  }

  .download-icon {
    flex-shrink: 0;
  }

  .hero-image {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .resource-preview {
    max-width: 100%;
    height: auto;
    border-radius: calc(var(--border-radius) * 2);
    box-shadow: 0 8px 24px var(--shadow-color);
    border: 1px solid var(--border-color);
  }

  /* Smooth scroll for CTA link */
  html {
    scroll-behavior: smooth;
  }

  /* Focus styles for accessibility */
  .cta-button:focus {
    outline: 2px solid var(--secondary-color);
    outline-offset: 2px;
  }

  /* Dark mode adjustments */
  [data-theme="dark"] .resource-hero {
    background: linear-gradient(135deg, var(--background-color) 0%, color-mod(var(--primary-color) alpha(0.1)) 100%);
  }

  [data-theme="dark"] .resource-metadata {
    background-color: color-mod(var(--primary-color) alpha(0.1));
  }
</style>